@startuml Architecture_C2_project_status
title Forum application C2 model alternative version project status
' Edited version of the C2 diagram that only shows what I will be implementing in the project and the status of the services.

' Status colors / How finished is a service?
' Blue = Not yet started on
' GoldernRod (Yellow) = Basic version
' Orange = Mostly finished
' Green = Finished (for now)

' !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include <C4/C4_Component>
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/react.puml
!include DEVICONS/dotnet.puml
!include DEVICONS/python.puml
!include DEVICONS/postgresql.puml
!include DEVICONS/mongodb.puml
!include FONTAWESOME/users.puml

Person(user, "User", "User of the application", $sprite="users")
Person(admin, "Admin", "Manages the application")

Container(frontend, "Frontend", "react", "Frontend user interface", $sprite="react")#Orange
Container(frontendadmin, "Admin frontend", "react", "Frontend admin interface", $sprite="react")

Container(api, "API Gateway", "ASP.NET", "Handles client requests and manages the routing of requests to the microservices", $sprite="dotnet")#Green

System_Boundary(ms, "Microservices", "Back-end services"){
Container(authservice, "AuthService", "ASP.NET", "Authentication & Authorization", $sprite="python")
Container(accservice, "AccountService", "ASP.NET", "User information", $sprite="python")
Container(threadservice, "ThreadService", "ASP.NET", "Threads", $sprite="dotnet")#Green
Container(postservice, "PostService", "ASP.NET", "Posts", $sprite="dotnet")#Green
Container(commentservice, "CommentService", "ASP.NET", "Comments", $sprite="dotnet")#Green
}

ContainerDb(authdb, "AuthDB", "PostgreSQL", "Credentials, sessions", $sprite="postgresql")
ContainerDb(userdb, "UserDB", "PostgreSQL", "User information and profiles", $sprite="postgresql")
ContainerDb(threaddb, "ThreadDB", "MongoDB", "Threads", $sprite="mongodb")#Green
ContainerDb(postdb, "PostDB", "MongoDB", "Posts", $sprite="mongodb")#Green
ContainerDb(commentdb, "CommentDB", "MongoDB", "Comments", $sprite="mongodb")#Green

System_Boundary(mb, "Message Broker", " "){
' queue Kafka as mq {
'    card messagebroker 
' }
ComponentQueue(mq, "Kafka", "MessageBroker")#GoldenRod
}

Rel_R(user, frontend, "Uses", "https")
Rel_R(admin, frontendadmin, "Uses", "https")

Rel(frontend, api, "Uses", "https")
Rel(frontendadmin, api, "Uses", "https")

user -[hidden]> frontend
frontend -[hidden]> frontendadmin
frontendadmin -[hidden]> admin

Rel(api, authservice, "Uses", "https")
Rel(api, accservice, "Uses", "https")
Rel(api, threadservice, "Uses", "https")
Rel(api, postservice, "Uses", "https")
Rel(api, commentservice, "Uses", "https")

authservice . accservice : msg
accservice . threadservice : msg
threadservice . postservice : msg
postservice . commentservice : msg

commentservice -[hidden]> mq

Rel(authservice, authdb, "Reads/Writes")
Rel(accservice, userdb, "Reads/Writes")
Rel(threadservice, threaddb, "Reads/Writes")
Rel(postservice, postdb, "Reads/Writes")
Rel(commentservice, commentdb, "Reads/Writes")

SHOW_LEGEND()
@enduml