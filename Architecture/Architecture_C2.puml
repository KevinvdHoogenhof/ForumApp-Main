@startuml Architecture_C2
' !include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!include <C4/C4_Component>
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!include DEVICONS/react.puml
!include DEVICONS/java.puml
!include DEVICONS/dotnet.puml
!include DEVICONS/postgresql.puml
!include DEVICONS/mongodb.puml
!include FONTAWESOME/users.puml

Person(user, "User", "User of the application", $sprite="users")

Container(frontend, "Frontend", "react", "Frontend user interface", $sprite="react")

Container(api, "API gateway", "ASP.NET", "Handles client requests and manages the routing of requests to the microservices", $sprite="dotnet")

System_Boundary(ms, "Microservices", "Back-end services"){
Container(accservice, "AccountService", "ASP.NET", "User information", $sprite="dotnet")
Container(authservice, "AuthService", "ASP.NET", "Authentication & Authorization", $sprite="dotnet")
Container(socialservice, "SocialService", "ASP.NET", "Friends & Messaging", $sprite="dotnet")
Container(threadservice, "ThreadService", "ASP.NET", "Threads", $sprite="dotnet")
Container(postservice, "PostService", "ASP.NET", "Posts", $sprite="dotnet")
Container(commentservice, "CommentService", "ASP.NET", "Comments", $sprite="dotnet")
Container(imageservice, "ImageService", "Node.js", "Images", $sprite="java")
}

ContainerDb(userdb, "UserDB", "Microsoft SQL", "User information and profiles", $sprite="postgresql")
ContainerDb(aadb, "AuthDB", "Microsoft SQL", "Credentials, sessions", $sprite="postgresql")
ContainerDb(socialdb, "SocialDB", "MongoDB", "Friends, messages", $sprite="mongodb")
ContainerDb(threaddb, "ThreadDB", "MongoDB", "Threads", $sprite="mongodb")
ContainerDb(postdb, "PostDB", "MongoDB", "Posts", $sprite="mongodb")
ContainerDb(commentdb, "CommentDB", "MongoDB", "Comments", $sprite="mongodb")
ContainerDb(imagedb, "ImageDB", "File Storage", "Image storage")
' Images public available in blob storage
' Image gets stored by api, returns link for image

System_Boundary(mb, "Message Broker", " "){
Container(mq, "Kafka", "ASP.NET", "MessageBroker")
}
Rel_R(user, frontend, "Uses", "https")

Rel(frontend, api, "Uses", "https")

Rel(api, accservice, "Uses", "https")
Rel(api, authservice, "Uses", "https")
Rel(api, socialservice, "Uses", "https")
Rel(api, threadservice, "Uses", "https")
Rel(api, postservice, "Uses", "https")
Rel(api, commentservice, "Uses", "https")
Rel(api, imageservice, "Uses", "https")

Rel(accservice, userdb, "Reads/Writes")
Rel(authservice, aadb, "Reads/Writes")
Rel(socialservice, socialdb, "Reads/Writes")
Rel(threadservice, threaddb, "Reads/Writes")
Rel(postservice, postdb, "Reads/Writes")
Rel(commentservice, commentdb, "Reads/Writes")
Rel(imageservice, imagedb, "Reads/Writes")

' BiRel_Down(ms, mq, "Async messaging", "https")
SHOW_LEGEND()
@enduml