events {
    # Basic configuration for events (required section)
    worker_connections 1024;
}

http {
    # Lua package path
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

	# JWT token validation function
    init_worker_by_lua_block {
        -- Define the JWT token validation function
        validate_jwt_token = function()
            local jwt = require "resty.jwt"
            local jwt_token = ngx.var.http_authorization
            if not jwt_token then
                ngx.status = 401
                ngx.say("Missing JWT token")
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            -- Extract the token from the "Bearer <token>" format
            local _, _, token = string.find(jwt_token, "Bearer%s+(.+)")

            -- Validate the JWT token
            local jwt_obj = jwt:verify("your_secret_key", token)
            if not jwt_obj["verified"] then
                ngx.status = 401
                ngx.say("Invalid JWT token")
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end
        end
    }

    # Server block for your API
    server {
        listen 80;
        server_name localhost;

        # Location block for threadservice
        location /thread/ {
            access_by_lua_block {
                if ngx.req.get_method() ~= "GET" then
                    validate_jwt_token()
                end
            }

			# Set CORS headers for OPTIONS requests
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
				add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
				add_header 'Access-Control-Allow-Credentials' 'true';
				add_header 'Content-Length' 0;
				add_header 'Content-Type' 'text/plain';
				return 204;
			}

			# Set CORS headers for other requests
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
			add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
			add_header 'Access-Control-Allow-Credentials' 'true';
			
            # Proxy all requests to the threadservice
            proxy_pass http://threadservice:8081/;
        }
		
		# Location block for postservice
        location /post/ {
            access_by_lua_block {
                if ngx.req.get_method() ~= "GET" then
                    validate_jwt_token()
                end
            }

			# Set CORS headers for OPTIONS requests
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
				add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
				add_header 'Access-Control-Allow-Credentials' 'true';
				add_header 'Content-Length' 0;
				add_header 'Content-Type' 'text/plain';
				return 204;
			}

			# Set CORS headers for other requests
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
			add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
			add_header 'Access-Control-Allow-Credentials' 'true';
			
            # Proxy all requests to the authservice
            proxy_pass http://postservice:8081/;
        }
		
		# Location block for commentservice
        location /comment/ {
            access_by_lua_block {
                if ngx.req.get_method() ~= "GET" then
                    validate_jwt_token()
                end
            }

			# Set CORS headers for OPTIONS requests
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
				add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
				add_header 'Access-Control-Allow-Credentials' 'true';
				add_header 'Content-Length' 0;
				add_header 'Content-Type' 'text/plain';
				return 204;
			}

			# Set CORS headers for other requests
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
			add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
			add_header 'Access-Control-Allow-Credentials' 'true';
			
            # Proxy all requests to the authservice
            proxy_pass http://commentservice:8081/;
        }

        # Location block for authservice
        location /auth/ {
			# Set CORS headers for OPTIONS requests
			if ($request_method = 'OPTIONS') {
				add_header 'Access-Control-Allow-Origin' '*';
				add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
				add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
				add_header 'Access-Control-Allow-Credentials' 'true';
				add_header 'Content-Length' 0;
				add_header 'Content-Type' 'text/plain';
				return 204;
			}

			# Set CORS headers for other requests
			add_header 'Access-Control-Allow-Origin' '*';
			add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT';
			add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization';
			add_header 'Access-Control-Allow-Credentials' 'true';
			
            # Proxy all requests to the authservice
            proxy_pass http://authservice:5000/;
        }

        # Location block for exposing Prometheus metrics
        location /metrics {
            stub_status;
            access_log off;
            allow 127.0.0.1;  # Allow access only from localhost
            deny all;
        }
    }
}
